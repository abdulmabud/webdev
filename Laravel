## Start laravel send mail using gmail
change .env file

MAIL_DRIVER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=webnstech@gmail.com
MAIL_PASSWORD="webns@1234"
MAIL_ENCRYPTION=tls

In web.php
Route::get('/mail','WelcomeController@mail');

In controller
use Mail;

public function mail(){
  $data['me'] = 'My Mail';

        Mail::send('mail.index', $data, function ($message) {
            $message->from('webnstech@gmail.com', 'Webns Tech Ltd');
            $message->sender('webnstech@gmail.com', 'Webns Tech ltd');
            $message->to('abdulmabudm@gmail.com', 'Abdul Mabud');
            $message->cc('abdulmabudcse@gmail.com', 'Md Abdul Mabud');
            $message->replyTo('john@johndoe.com', 'John Doe');
            $message->subject('Nw Subject');
            $message->priority(3);
            $message->attach(public_path('custom/img/Freedom.jpg'));
        });
}

## End laravel send mail using gmail


## Start Send email to multiple person with 100 seconds delay.  change in controller

  $mails = ['abdulmabudcse@gmail.com', 'me@abdulmabud.com', 'abdulmabud@emedicine24.com', 'abdulmabudm@gmail.com'];
        foreach($mails as $mail){
            Mail::send('mail.index', $data, function ($message) use($mail) {
                       
                    $message->from('webnstech@gmail.com', 'Webns Tech Ltd');
                    $message->sender('webnstech@gmail.com', 'Webns Tech ltd');
                    $message->to($mail, 'Abdul Mabud');
                    $message->cc('abdulmabudcse@gmail.com', 'Md Abdul Mabud');
                    $message->replyTo('john@johndoe.com', 'John Doe');
                    $message->subject('Newseeess Subject');
                    $message->priority(3);
                    $message->attach(public_path('custom/img/Freedom.jpg'));
                
            });

            sleep(100);
        }


## End Send email to multiple person with 100 seconds delay.



## Laravel Event Listener Practice

step 1: php artisan make:event EventName
step 2: php artisan make:listener ListenerName
step 3: Rigister/Connect Event and Listener in EventServiceProvider.php file which is locate at App\Provider folder.
step 4: Fire event from controller or web.php file or any other file using this code: event(new EventName()); and include use App\Events\EventName;
   You can passs parameter via event(new EventName($name)); which is available on event __construct method. Then you can use it listener handle method. Below code example given:
   
# Event file (Like is event name)
<?php

namespace App\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Broadcasting\PresenceChannel;
use Illuminate\Broadcasting\PrivateChannel;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

class Like
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    /**
     * Create a new event instance.
     *
     * @return void
     */
   public $name;
    public function __construct($name)
    {
        $this->name = $name;
    }

    /**
     * Get the channels the event should broadcast on.
     *
     * @return \Illuminate\Broadcasting\Channel|array
     */
    public function broadcastOn()
    {
        return new PrivateChannel('channel-name');
    }
}

# Listener File (Likes is listener name)
<?php

namespace App\Listeners;

use App\Events\Like;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Queue\InteractsWithQueue;

class Likes
{
    /**
     * Create the event listener.
     *
     * @return void
     */
    public function __construct()
    {
        
    }

    /**
     * Handle the event.
     *
     * @param  PostCreated  $event
     * @return void
     */
    public function handle(Like $event)
    {
        info('everything under cotroll');
        // echo 'hello';
        echo $event->name;
    }
}

# In web.php
Route::get('/eventlike', [TestController::class, 'eventLike']);

# In controller 
public function eventLike(Request $request){
        event(new Like('My name is Abdul Mabud'));
        // event(new PostCreated());
    }
 
 ## End Laravel Event Listener Practice
 
 
 ### Laravel Cache Practice
 
 # Post comes from Cache memory. It helps to less pressure on the database because it's run few queries only.
 # We save our post and its details on cache memory when Post created, updated, deleted. We need three event such as PostCreated, PostUpdated, PostDeleted. And one listener PostStoreCache.
 all codes are given below:
 Step 1: Create 3 event: PostCreated, PostUpdated, PostDeleted.
 Step 2: Create 1 Listener: PostStoreCache.
 Step 3: Three events register with one listener in EventServiceProivder File.
 Step 4: Write dispatchesEvents property on Post model.
 
 
 EventServiceProvider.php
  protected $listen = [
        PostCreated::class => [
            PostStoreCache::class
        ],
        PostUpdated::class => [
            PostStoreCache::class
        ],
        PostDeleted::class => [
            PostStoreCache::class
        ],
    
    ];
 
 Listener: PostStoreCache.php
 
 public function handle($event)
    {
        Cache::put('posts', $data['posts'] = Post::with('category')->get());
    }
 
 
 Model: Post.php
  protected $dispatchesEvents = [
        'created' => PostCreated::class,
        'updated' => PostUpdated::class,
        'deleted' => PostDeleted::class,
    ];
    
    
    Controller: PostController.php
    
     if(Cache::has('posts')){
            $data['posts'] = Cache::get('posts');
        }else{
            $data['posts'] = Post::with('category')->get();
        }
        return view('post.index', $data);
    
 ### End Laravel Cache Practice
